{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","isClick","setClick","useWindowSize","width","height","className","viewBox","d","style","zIndex","onClick","numberOfPieces","confettiSource","x","y","w","h","gravity","colors","opacity","run","tweenDuration","drawShape","ctx","beginPath","moveTo","bezierCurveTo","fill","closePath","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SA0FeA,MA/Ef,WAAgB,IAAD,EACeC,oBAAS,GADxB,mBACNC,EADM,KACGC,EADH,OAEaC,MAAlBC,EAFK,EAELA,MAAOC,EAFF,EAEEA,OAIf,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACG,IACD,gCAAS,IACT,8BACE,yBAAKA,UAAU,SAASC,QAAQ,eAC9B,0BACEC,EAAE,kJAIN,qCAGJ,wBAAIC,MAAO,CAAEC,OAAQ,MAArB,gBAEA,kBAAC,IAAD,CAAUT,QAASA,EAASU,QAAS,kBAAMT,GAAUD,MAMrD,kBAAC,IAAD,CACEG,MAAOA,EACPC,OAAQA,EACRO,eAAgB,GAChBC,eAAgB,CAAEC,EAAG,IAAKC,EAAG,IAAKC,EAAG,GAAIC,EAAG,IAG5CC,QAAS,IAGTC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAU,UAAU,UAAU,UAAW,UAAW,YAAY,WACrHC,QAAS,GAETC,IAAKpB,EACLqB,cAAe,IAgBfC,UAAW,SAAAC,GACTA,EAAIC,YACJD,EAAIE,OAAO,GAAI,IAEfF,EAAIG,cAAc,GAAI,GAAI,GAAI,GAAI,GAAI,IACtCH,EAAIG,cAAc,GAAI,GAAI,GAAI,KAAM,GAAI,MACxCH,EAAIG,cAAc,GAAI,GAAI,GAAI,IAAK,GAAI,KACvCH,EAAIG,cAAc,IAAK,IAAK,IAAK,GAAI,IAAK,MAC1CH,EAAIG,cAAc,IAAK,KAAM,IAAK,GAAI,IAAK,IAC3CH,EAAIG,cAAc,GAAI,GAAI,GAAI,GAAI,GAAI,IACtCH,EAAII,OACJJ,EAAIK,kBCtEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74952e6e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nimport Confetti from \"react-confetti\";\nimport PopHeart from \"react-animated-heart\";\n\nimport useWindowSize from \"react-use/lib/useWindowSize\";\n\nlet logo =\n  \"https://ideas.hallmark.com/wp-content/uploads/2015/02/1-You-are-loved-Valentine-shareable.jpg\";\n\nfunction App() {\n  const [isClick, setClick] = useState(false);\n  const { width, height } = useWindowSize();\n\n  let showit = () => (isClick === true ? \"\" : \"none\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          {\" \"}\n          <b>I</b>{\" \"}\n          <span>\n            <svg className=\"heart1\" viewBox=\"0 0 32 29.6\">\n              <path\n                d=\"M23.6,0c-3.4,0-6.3,2.7-7.6,5.6C14.7,2.7,11.8,0,8.4,0C3.8,0,0,3.8,0,8.4c0,9.4,9.5,11.9,16,21.2\n\tc6.1-9.3,16-12.1,16-21.2C32,3.8,28.2,0,23.6,0z\"\n              />\n            </svg>\n            <b>You </b>\n          </span>\n        </div>\n        <h2 style={{ zIndex: \"1\" }}>Emiley Corey</h2>\n\n        <PopHeart isClick={isClick} onClick={() => setClick(!isClick)} />\n\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" style={{ display : showit() }}/> */}\n\n        {/* <Confetti width={1500} height={1000} run={isClick} recycle={false}/> */}\n\n        <Confetti\n          width={width}\n          height={height}\n          numberOfPieces={50}\n          confettiSource={{ x: 720, y: 475, w: 20, h: 10 }}\n          // friction={0.95}\n          // wind={-0.05}\n          gravity={0.01}\n          // initialVelocityX={4}\n          // initialVelocityY={5}\n          colors={[\"#AFEEEE\", \"#40E0D0\", \"#48D1CC\", \"#00CED1\", \"#007b7d\",\"#FF1493\",\"#FF00FF\",\"#8A2BE2\", \"#FF0000\", \"\t#FFFF00\", \"#FFE4E1\"]}\n          opacity={0.5}\n          // recycle={isClick === false ? true : false}\n          run={isClick}\n          tweenDuration={10000}\n          // tweenFunction={1}\n          // onConfettiComplete={(confetti) => console.log(\"confetti is\",confetti)}\n\n          // drawShape={ctx => {\n          //   ctx.beginPath()\n          //   for(let i = 0; i < 22; i++) {\n          //     const angle = 0.35 * i\n          //     const x = (0.2 + (1.5 * angle)) * Math.cos(angle)\n          //     const y = (0.2 + (1.5 * angle)) * Math.sin(angle)\n          //     ctx.lineTo(x, y)\n          //   }\n          //   ctx.stroke()\n          //   ctx.closePath()\n          // }}\n\n          drawShape={ctx => {\n            ctx.beginPath();\n            ctx.moveTo(75, 40);\n\n            ctx.bezierCurveTo(75, 37, 70, 25, 50, 25);\n            ctx.bezierCurveTo(20, 25, 20, 62.5, 20, 62.5);\n            ctx.bezierCurveTo(20, 80, 40, 102, 75, 120);\n            ctx.bezierCurveTo(110, 102, 130, 80, 130, 62.5);\n            ctx.bezierCurveTo(130, 62.5, 130, 25, 100, 25);\n            ctx.bezierCurveTo(85, 25, 75, 37, 75, 40);\n            ctx.fill();\n            ctx.closePath();\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}